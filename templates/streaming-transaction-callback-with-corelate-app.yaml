AWSTemplateFormatVersion: "2010-09-09"
Description: "Stack for creating Kinesis Application"

Parameters:
  ProjectName:
    Type: String
    Description: Project Name
    MinLength: 4
    MaxLength: 40

  ApplicationName:
    Type: String
    Description: Application Name
    MinLength: 4
    MaxLength: 40

  DataStreamName:
    Type: String
    Description: Producer input stream name
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: " Required. Must not start or end with a hyphen"
    MinLength: 4
    MaxLength: 40

  SourceRecordsAggregation:
    Type: String
    Default: true
    Description: Source records are aggregated
    AllowedValues:
      - true
      - false

  PreprocessorStackName:
    Type: String
    Description: Preprocessor Stack Name

  AnalyticsBucketArn:
    Type: String
    Description: Analytics Bucket ARN

Conditions:
  AGGR: !Equals [!Ref SourceRecordsAggregation, true]

Resources:
  DeliveryStreamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: s3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: ""
                Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Resource:
                  - !Sub "${AnalyticsBucketArn}"
                  - !Sub "${AnalyticsBucketArn}/*"
              - Sid: ""
                Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kinesisfirehose/*:log-stream:*"

  DeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: DirectPut
      S3DestinationConfiguration:
        BucketARN: !Sub "${AnalyticsBucketArn}"
        BufferingHints:
          IntervalInSeconds: "60"
          SizeInMBs: "1"
        CompressionFormat: UNCOMPRESSED
        RoleARN: !GetAtt "DeliveryStreamRole.Arn"

  OutputStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub "${AWS::StackName}-OutputStream"
      RetentionPeriodHours: 24
      ShardCount: 1

  KinesisAnalyticsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - kinesisanalytics.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: kinesisaccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: ReadInputStream
                Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:GetShardIterator
                  - kinesis:GetRecords
                Resource:
                  - !Sub "arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${DataStreamName}"
              - Sid: ListStreams
                Effect: Allow
                Action:
                  - firehose:ListDeliveryStreams
                Resource: "*"
              - Sid: RunPreprocessor
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:GetFunctionConfiguration
                Resource:
                  - Fn::ImportValue: !Sub "${PreprocessorStackName}:PreprocessorARN"
              - Sid: WriteOutputFirehose
                Effect: Allow
                Action:
                  - firehose:DescribeDeliveryStream
                  - firehose:PutRecord
                  - firehose:PutRecordBatch
                Resource:
                  - !GetAtt "DeliveryStream.Arn"

  KinesisApplication:
    Type: AWS::KinesisAnalytics::Application
    Properties:
      ApplicationName: !Ref ApplicationName
      ApplicationDescription: !Sub "Kinesis Analytics for ${ProjectName}-${ApplicationName}"
      ApplicationCode: !Sub |
        -- transaction
        CREATE OR REPLACE STREAM "TRANSACTION_STREAM"(
            transactionId VARCHAR(20), requestMsisdn INTEGER,
            serviceName VARCHAR(20), sourceSystem VARCHAR(20), msisdn INTEGER, transactionTime TIMESTAMP, responseCode VARCHAR(20), responseStatus VARCHAR(20),
            transactionType VARCHAR(20), productId VARCHAR(20), sendTo VARCHAR(20), paybill VARCHAR(10), accountNumber VARCHAR(20), tillNumber VARCHAR(10), 
            amount DOUBLE, channel VARCHAR(25), RecordType VARCHAR(20), RecordCount INTEGER
            );

        CREATE OR REPLACE PUMP "TRANSACTION_PUMP" AS INSERT INTO "TRANSACTION_STREAM" 
            SELECT STREAM
                s."transactionId", s."requestMsisdn",
                s."serviceName", s."sourceSystem", s."msisdn", FLOOR(TO_TIMESTAMP(s."transactionTime"+10800000) TO MINUTE), s."responseCode", s."responseStatus",
                s."transactionType", s."productId", s."sendTo", s."paybill", s."accountNumber", s."tillNumber",
                s."amount", s."channel", 'Transaction' AS RecordType, COUNT(s."transactionId")
            FROM "DATA_001" AS s
            WHERE 
                s."checkoutRequestID" IS NULL AND 
                s."merchantRequestID" IS NULL
            WINDOWED BY STAGGER (
                        PARTITION BY FLOOR(TO_TIMESTAMP(s."transactionTime"+10800000) TO MINUTE),
                        s."transactionId", s."requestMsisdn",
                        s."serviceName", s."sourceSystem", s."msisdn", s."responseCode", s."responseStatus", 
                        s."transactionType", s."productId", s."sendTo", s."paybill", s."accountNumber", s."tillNumber",
                        s."amount", s."channel"
                        RANGE INTERVAL '1' MINUTE);
        -- callback
        CREATE OR REPLACE STREAM "CALLBACK_STREAM"(
            transactionId VARCHAR(20), checkoutRequestID VARCHAR(50), merchantRequestID VARCHAR(50), requestMsisdn INTEGER,
            serviceName VARCHAR(20), sourceSystem VARCHAR(20), msisdn INTEGER, transactionTime TIMESTAMP, responseCode VARCHAR(20), responseStatus VARCHAR(20),
            transactionType VARCHAR(20), productId VARCHAR(20), sendTo VARCHAR(20), paybill VARCHAR(10), accountNumber VARCHAR(20), tillNumber VARCHAR(10), 
            amount DOUBLE, channel VARCHAR(25), RecordType VARCHAR(20), RecordCount INTEGER
            );

        CREATE OR REPLACE PUMP "CALLBACK_PUMP" AS INSERT INTO "CALLBACK_STREAM"
        SELECT STREAM
            s."transactionId", s."checkoutRequestID", s."merchantRequestID", s."requestMsisdn",
            s."serviceName", s."sourceSystem", s."msisdn", FLOOR(TO_TIMESTAMP(s."transactionTime"+10800000) TO MINUTE), s."responseCode", s."responseStatus",
            s."transactionType", s."productId", s."sendTo", s."paybill", s."accountNumber", s."tillNumber",
            s."amount", s."channel", 'Callback' AS RecordType, COUNT(s."transactionId")
        FROM "DATA_001" AS s
        WHERE 
            s."checkoutRequestID" IS NOT NULL AND 
            s."merchantRequestID" IS NOT NULL
        WINDOWED BY STAGGER (
                    PARTITION BY FLOOR(TO_TIMESTAMP(s."transactionTime"+10800000) TO MINUTE),
                    s."transactionId", s."checkoutRequestID", s."merchantRequestID", s."requestMsisdn",
                    s."serviceName", s."sourceSystem", s."msisdn", s."responseCode", s."responseStatus", 
                    s."transactionType", s."productId", s."sendTo", s."paybill", s."accountNumber", s."tillNumber",
                    s."amount", s."channel"
                    RANGE INTERVAL '1' MINUTE);

        -- joined
        CREATE OR REPLACE STREAM "TXN_WITH_CALLBACK_STREAM"(
            transactionId VARCHAR(20), checkoutRequestID VARCHAR(50), merchantRequestID VARCHAR(50), requestMsisdn INTEGER,
            serviceName VARCHAR(20), sourceSystem VARCHAR(20), msisdn INTEGER, transactionTime TIMESTAMP, responseCode VARCHAR(20), responseStatus VARCHAR(20),
            transactionType VARCHAR(20), productId VARCHAR(20), sendTo VARCHAR(20), paybill VARCHAR(10), accountNumber VARCHAR(20), tillNumber VARCHAR(10), 
            amount DOUBLE, channel VARCHAR(25), RecordType VARCHAR(20)
            );

        CREATE OR REPLACE PUMP "TXN_WITH_CALLBACK_PUMP" AS INSERT INTO "TXN_WITH_CALLBACK_STREAM" 
        SELECT STREAM
            txn.transactionId, cb.checkoutRequestID, cb.merchantRequestID, txn.requestMsisdn,
            txn.serviceName, txn.sourceSystem, txn.msisdn, txn.transactionTime, cb.responseCode, cb.responseStatus,
            txn.transactionType, txn.productId, txn.sendTo, txn.paybill, txn.accountNumber, txn.tillNumber,
            txn.amount, txn.channel, 'TxnCallback' AS RecordType
        FROM "TRANSACTION_STREAM" AS txn INNER JOIN "CALLBACK_STREAM" AS cb
        ON txn.transactionId=cb.transactionId AND txn.transactionTime=cb.transactionTime;

      Inputs:
        - NamePrefix: DATA
          InputSchema:
            RecordColumns:
              - Name: transactionId
                SqlType: VARCHAR(20)
                Mapping: $.transactionId
              - Name: checkoutRequestID
                SqlType: VARCHAR(50)
                Mapping: $.checkoutRequestID
              - Name: merchantRequestID
                SqlType: VARCHAR(50)
                Mapping: $.merchantRequestID
              - Name: requestMsisdn
                SqlType: INTEGER
                Mapping: $.requestDetails.msisdn
              - Name: tmstamp
                SqlType: BIGINT
                Mapping: $.timestamp
              - Name: serviceName
                SqlType: VARCHAR(20)
                Mapping: $.serviceName
              - Name: sourceSystem
                SqlType: VARCHAR(20)
                Mapping: $.sourceSystem
              - Name: msisdn
                SqlType: INTEGER
                Mapping: $.msisdn
              - Name: transactionTime
                SqlType: BIGINT
                Mapping: $.transactionTime
              - Name: responseCode
                SqlType: VARCHAR(20)
                Mapping: $.responseCode
              - Name: responseStatus
                SqlType: VARCHAR(20)
                Mapping: $.responseStatus
              - Name: transactionType
                SqlType: VARCHAR(20)
                Mapping: $.transactionType
              - Name: productId
                SqlType: VARCHAR(20)
                Mapping: $.revenue.productId
              - Name: sendTo
                SqlType: VARCHAR(20)
                Mapping: $.revenue.sendTo
              - Name: paybill
                SqlType: VARCHAR(10)
                Mapping: $.revenue.paybill
              - Name: accountNumber
                SqlType: VARCHAR(20)
                Mapping: $.revenue.accountNumber
              - Name: tillNumber
                SqlType: VARCHAR(10)
                Mapping: $.revenue.tillNumber
              - Name: amount
                SqlType: DOUBLE
                Mapping: $.revenue.amount
              - Name: channel
                SqlType: VARCHAR(15)
                Mapping: $.revenue.channel

            RecordFormat:
              RecordFormatType: JSON
              MappingParameters:
                JSONMappingParameters:
                  RecordRowPath: $
          InputProcessingConfiguration:
            Fn::If:
              - AGGR
              - InputLambdaProcessor:
                  ResourceARN:
                    Fn::ImportValue: !Sub "${PreprocessorStackName}:PreprocessorARN"
                  RoleARN: !GetAtt "KinesisAnalyticsRole.Arn"
              - Ref: AWS::NoValue
          KinesisStreamsInput:
            ResourceARN: !Sub "arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${DataStreamName}"
            RoleARN: !GetAtt "KinesisAnalyticsRole.Arn"

  KinesisAnalyticsAppOutput:
    Type: AWS::KinesisAnalytics::ApplicationOutput
    Properties:
      ApplicationName: !Ref KinesisApplication
      Output:
        DestinationSchema:
          RecordFormatType: JSON
        KinesisFirehoseOutput:
          ResourceARN: !GetAtt DeliveryStream.Arn
          RoleARN: !GetAtt KinesisAnalyticsRole.Arn
        Name: TXN_WITH_CALLBACK_STREAM

Outputs:
  KinesisAppName:
    Description: Kinesis Application name
    Value: !Ref KinesisApplication
    Export:
      Name: !Sub "${AWS::StackName}:KinesisAppName"

  DeliveryStreamName:
    Description: Delivery stream name
    Value: !Ref DeliveryStream
    Export:
      Name: !Sub "${AWS::StackName}:DeliveryStreamName"

  DeliveryStreamARN:
    Description: Delivery stream ARN
    Value: !GetAtt DeliveryStream.Arn
    Export:
      Name: !Sub "${AWS::StackName}:DeliveryStreamARN"
